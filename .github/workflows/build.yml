name: Build and release

#on:
#  push:
#  release:
#    types: [created]

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Release target'
        required: true
        default: 'test'

jobs:
  build_wheels:
    name: Build Wheels on ${{ matrix.os }}-${{ matrix.platform_id }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure the wheels build even one fails.
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python: [36, 37, 38, 39]
        bitness: [32, 64]
        include:
          # Run 32 and 64 bit version in parallel for Linux and Windows
          - os: windows-latest
            bitness: 64
            platform_id: win_amd64
          - os: windows-latest
            bitness: 32
            platform_id: win32
          - os: ubuntu-latest
            bitness: 64
            platform_id: manylinux_x86_64
          - os: ubuntu-latest
            bitness: 32
            platform_id: manylinux_i686
          - os: macos-latest
            bitness: 64
            platform_id: macosx_x86_64
        exclude:
          - os: macos-latest
            bitness: 32
    env:
      CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
      CIBW_TEST_REQUIRES: pytest==4.* hypothesis==4.*
      CIBW_TEST_COMMAND: "bash {project}/tools/test_wheels.sh {project}"
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
      CIBW_MANYLINUX_I686_IMAGE: manylinux1
    steps:
      - uses: actions/checkout@v2

      - name: Build wheels
        uses: pypa/cibuildwheel@v1.11.1.post1

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

#      - name: Publish (Release)
#        if: github.event_name == 'release'
#        env:
#          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#        run: |
#          pip install twine
#          twine upload wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'

      - name: Build sdist
        run: python setup.py sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  publish_pypi:
    needs: [ build_wheels, build_sdist ]
    runs-on: ubuntu-latest
    # TODO: Migrate to automated release once verified?
    # upload to PyPI on every tag starting with 'v'
    # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Publish test release
        if: github.event.inputs.target == 'test'
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verbose: true

      - name: Publish release
        if: github.event.inputs.target != 'test'
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
         user: __token__
         password: ${{ secrets.PYPI_API_TOKEN }}
