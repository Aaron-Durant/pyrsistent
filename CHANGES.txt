Revision history
----------------
v0.6.0, 2014-10-25
  * New data structure, persistent linked list
  * New data structure, persistent double ended queue

v0.5.0, 2014-09-24
  * New data structure, persistent bag / multiset
  * New functions freeze and thaw to recursively convert between python
    built in data types and corresponding pyrsistent data types.
  * All data structures can now be pickled
  * New function merge_in on persistent map which allows a user
    supplied function to implement the merge strategy.

v0.4.0, 2014-09-20
  * Full Python 3 support.
  * Immutable object implemented.
  * Bug fixes in PVector.__repr__() and PMap.__hash__() and index check of PVector.
  * Repr changed to be fully cut and paste compatible
  * Changed assoc() -> set(), assoc_in() -> set_in(), massoc() -> mset().
    Sorry for the API breaking change but I think those names are more pythonic.
  * Improved documentation.

v0.3.1, 2014-06-29
  * assoc() on PSet renamed back to add()

v0.3.0, 2014-06-28
  * Full Sequence protocol support for PVector
  * Full Mapping protocol support for PMap
  * Full Set protocol support for PSet
  * assoc_in() support for both PMap and PVector
  * merge() support for PMap
  * Performance improvements to the PVector C extension speed up allocation

v0.2.1, 2014-06-21
  * Supply the tests with the distribution

v0.2.0, 2014-06-21
  * New C extension with an optimized version of the persistent vector
  * Updated API slightly

v0.1.0, 2013-11-10
  * Initial release.


TODO (in no particular order)
-----------------------------
- More convenience methods to simplify work with these data structures.
- Create optimized function for replacing multiple elements in the same function call (massoc) that can
  also be used by the PMap, "merge into".
- Versioned data structure where the different versions can be accessed by index?
- Ordered sets and maps
- A good performance measurement suite

