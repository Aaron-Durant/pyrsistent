Revision history
----------------
v0.7.0, 2015-01-04, No 1.0, instead a bunch of new stuff and one API breaking change to PMap.remove().
  * Evolvers for pvector, pmap and pset to allow simple and efficient updates of multiple elements
    in the collection. See the documentation for a closer description.
  * New method mset on pvector to update multiple values in one operation
  * Remove deprecated methods merge and merge_with on PMap
  * Change behavior of PMap.remove, it will now raise a KeyError if the element is not present.
    New method PMap.discard will instead return the original pmap if the element is not present.
    This aligns the PMap with how things are done in the PSet and is closer to the behavior of the
    built in counterparts.

v0.6.3, 2014-11-27
  * Python 2.6 support, thanks @wrmsr!
  * PMap.merge/merge_with renamed to update/update_with. merge/merge_with remains but will be
    removed for 1.0.
  * This is a release candidate for 1.0! Please be aware that PMap.merge/merge_with and immutable()
    will be removed for 1.0.

v0.6.2, 2014-11-03
  * Fix typo causing the pure python vector to be used even if the C implementation was
    available. Thanks @zerc for finding it!

v0.6.1, 2014-10-31
  * Renamed 'immutable' to 'pclass' for consistency but left immutable for compatibility.

v0.6.0, 2014-10-25
  * New data structure, persistent linked list
  * New data structure, persistent double ended queue

v0.5.0, 2014-09-24
  * New data structure, persistent bag / multiset
  * New functions freeze and thaw to recursively convert between python
    built in data types and corresponding pyrsistent data types.
  * All data structures can now be pickled
  * New function merge_in on persistent map which allows a user
    supplied function to implement the merge strategy.

v0.4.0, 2014-09-20
  * Full Python 3 support.
  * Immutable object implemented.
  * Bug fixes in PVector.__repr__() and PMap.__hash__() and index check of PVector.
  * Repr changed to be fully cut and paste compatible
  * Changed assoc() -> set(), assoc_in() -> set_in(), massoc() -> mset().
    Sorry for the API breaking change but I think those names are more pythonic.
  * Improved documentation.

v0.3.1, 2014-06-29
  * assoc() on PSet renamed back to add()

v0.3.0, 2014-06-28
  * Full Sequence protocol support for PVector
  * Full Mapping protocol support for PMap
  * Full Set protocol support for PSet
  * assoc_in() support for both PMap and PVector
  * merge() support for PMap
  * Performance improvements to the PVector C extension speed up allocation

v0.2.1, 2014-06-21
  * Supply the tests with the distribution

v0.2.0, 2014-06-21
  * New C extension with an optimized version of the persistent vector
  * Updated API slightly

v0.1.0, 2013-11-10
  * Initial release.


TODO (in no particular order)
-----------------------------
- Versioned data structure where the different versions can be accessed by index?
- Ordered sets and maps
- A good performance measurement suite
- Provide additional package with literal syntax for pvector, pmap, pset?
- Replace parts of the set_in implementation with standalone function
